// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package egg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EggClient is the client API for Egg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EggClient interface {
	Comment(ctx context.Context, in *EggRequest, opts ...grpc.CallOption) (*EggResponse, error)
}

type eggClient struct {
	cc grpc.ClientConnInterface
}

func NewEggClient(cc grpc.ClientConnInterface) EggClient {
	return &eggClient{cc}
}

func (c *eggClient) Comment(ctx context.Context, in *EggRequest, opts ...grpc.CallOption) (*EggResponse, error) {
	out := new(EggResponse)
	err := c.cc.Invoke(ctx, "/egg.Egg/Comment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EggServer is the server API for Egg service.
// All implementations must embed UnimplementedEggServer
// for forward compatibility
type EggServer interface {
	Comment(context.Context, *EggRequest) (*EggResponse, error)
	mustEmbedUnimplementedEggServer()
}

// UnimplementedEggServer must be embedded to have forward compatible implementations.
type UnimplementedEggServer struct {
}

func (UnimplementedEggServer) Comment(context.Context, *EggRequest) (*EggResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (UnimplementedEggServer) mustEmbedUnimplementedEggServer() {}

// UnsafeEggServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EggServer will
// result in compilation errors.
type UnsafeEggServer interface {
	mustEmbedUnimplementedEggServer()
}

func RegisterEggServer(s grpc.ServiceRegistrar, srv EggServer) {
	s.RegisterService(&Egg_ServiceDesc, srv)
}

func _Egg_Comment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EggRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EggServer).Comment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/egg.Egg/Comment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EggServer).Comment(ctx, req.(*EggRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Egg_ServiceDesc is the grpc.ServiceDesc for Egg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Egg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "egg.Egg",
	HandlerType: (*EggServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Comment",
			Handler:    _Egg_Comment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "egg.proto",
}
